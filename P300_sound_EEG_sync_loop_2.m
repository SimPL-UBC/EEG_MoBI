function [grand_avg_high,grand_avg_low] = P300_sound_EEG_sync_loop_2(DataDir,ScriptDir,savedFolder,numchannels,Fs,folder_name,P300_time_column,number_high,number_low)
% P300_sound_EEG_sync_loop_2 takes a given directory with openBCI text
% files, and the generated timestamp from matlab, and merges them so that
% each data point is marked as either during a high tone, during a low
% tone, or during no tone, then converts it into a matlab file, and
% provides the plot of the data with markers showing the beginning of the
% high and low tone, then, it takes 2 second segments of all the high tone
% data and averages it, called grand averaging, and does the same with the 
%low tone, and plots this

%INPUTS
%DataDir is the directory of openBCI EEG text data
%ScriptDir is the directory with the timestamps generated by matlab
%savedFolder is the path of where the plots are saved to
%numchannels is the number of channels of EEG, in the form of say, [1:6]
%for channels 1 to 6
%Fs is the sampling rate of the device
%folder_name is the name used in saving the grand averaged figures, 
%so that when we average across experiments it will be easier to deal with 
%P300_time_column is the column in the openBCI text file where the
%timestamp is, this may be different depending on the version of openBCI
%you have

%OUTPUTS
%grand_avg_high is a matlab matrix of the signal average data from the high
%tones
%grand_avg_low is a matlab matrix of the signal average data from the low
%tones

% Specify and create new folders where the plots will go, based on the savedFolder path.
%First folder saves the text data synced with the timestamp, the second
%folder saves the matlab data with timestamp, and the last folder saves all
%the plots
newpath1 = [savedFolder '\synced_text_data'];
mkdir(newpath1)

newpath2 = [savedFolder '\synced_matlab_data'];
mkdir(newpath2)

newpath3 = [savedFolder '\matlab_subplots_audio_syncing'];
mkdir(newpath3)

newpath4 = [savedFolder '\Low and High Tone segments'];
mkdir(newpath4)

% Check to make sure that folder actually exists.  Warn user if it doesn't.
if ~isfolder(DataDir)
  errorMessage = sprintf('Error: The following folder does not exist:\n%s',DataDir);
  uiwait(warndlg(errorMessage));
  return;
end

% Get a list of all files in the folder with the desired file name pattern.
%picking out all the .txt files, one for the data, one for the timestamps
filePattern_data = fullfile(DataDir, '*.txt');
theFiles_data = dir(filePattern_data);

filePattern_stamp = fullfile(ScriptDir, '*.txt');
theFiles_stamp = dir(filePattern_stamp);

%sorts the data so that it is in natural number order as opposed to binary
theFiles_data = natsortfiles({theFiles_data.name});
theFiles_stamp = natsortfiles({theFiles_stamp.name});

size_channels = size(numchannels);

%NOTE THIS WAS CHANGED FROM 2 TO 3
  %initializing variables to store the 2 seconds of high and lone tone data; 
  P300_set_high = zeros(3*Fs,number_high,size_channels(2),length(theFiles_data));
  P300_set_low = zeros(3*Fs,number_low,size_channels(2),length(theFiles_data));

%this loop reads in each of the files in the listed directory, and applies
%the import and cropping functions, for both the data and script directory

for k = 1 : length(theFiles_data)
  baseFileName_data = theFiles_data{k};
  fullFileName_data = fullfile(DataDir, baseFileName_data);
  fprintf(1, 'Now reading %s\n', fullFileName_data);
  [~,name_data,~] = fileparts(theFiles_data{k});
  
  baseFileName_stamp = theFiles_stamp{k};
  fullFileName_stamp = fullfile(ScriptDir, baseFileName_stamp);
  fprintf(1, 'Now reading %s\n', fullFileName_stamp);
  %[~,name_stamp,~] = fileparts(theFiles_stamp{k});
  
  % reading and syncing the timestamps to the data
  synced_folder = P300_sound_EEG_sync_audio_2(fullFileName_data,fullFileName_stamp,newpath1,name_data,P300_time_column);
  %converts text files to matlab files
  Formatted_data = Import_txt_open_bci_synced_audio(synced_folder,name_data,4+5*(k-1),newpath2,numchannels,P300_time_column);
  %taking the last row of the data, which are the markers for the high and
  %low tones
  a = Formatted_data(:,end);
  %extracting the indexes where it is the beginning of a high or low tone,
  %and storing these axes
  [onset_high, onset_low] = extracting_indexes(a);
%   size_high = size(onset_high);
%   size_low = size(onset_low);
  %getting rid of the last row of data with the markers, since we have
  %gotten the indices
  
  Formatted_data_1 = Formatted_data(:,1:size_channels(2));
  %Plotting_single_subplot_EEG_data_audio_syncing(Formatted_data,name_data,newpath3,2*k-1,250,'EEG Values Before Filtering vs. Time, with Audio Stimuli Markers','Time(s)','Amplitude','EEG Values before filtering, with Audio Stimuli Markers.fig',onset_high,onset_low)
  %filtering the data with a highpass at 1Hz and notch at 60Hz
  Filtered_data = Filtering_data_highpass_notch(Fs,Formatted_data_1,60);
  %generating plots for the data
  [P300_set_high(:,:,:,k),P300_set_low(:,:,:,k)] = Plotting_single_subplot_EEG_data_audio_syncing(Filtered_data,name_data,newpath3,k,250,'EEG Values After Filtering vs. Time,with Audio Stimuli Markers','Time(s)','Amplitude','EEG Values after filtering, with Audio Stimuli Markers.fig',onset_high,onset_low);

  %saving the .mat data in the specified folder, with specified name
  name_low = sprintf('Low_Tone_Data%d',k);
  name_high = sprintf('High_Tone_Data%d',k);
  
  newName = sprintf(name_low);
  S1.(newName) = P300_set_low(:,:,:,k) ;
  save(fullfile(newpath4,name_low), '-struct', 'S1');
  
  newName = sprintf(name_high);
  S2.(newName) = P300_set_high(:,:,:,k);
  save(fullfile(newpath4,name_high), '-struct', 'S2');
  
end

  name_total_high = sprintf('All_High_Tone_Data');
  newName = sprintf(name_total_high);
  S3.(newName) = P300_set_high;
  save(fullfile(savedFolder,name_total_high), '-struct', 'S3');
  
  name_total_low = sprintf('All_Low_Tone_Data');
  newName = sprintf(name_total_low);
  S4.(newName) = P300_set_low;
  save(fullfile(savedFolder,name_total_low), '-struct', 'S4');

%calculating the grand average for the high and low tone signals, and
%plotting
grand_avg_high = grand_averaged_signal(P300_set_high,k+1,savedFolder,'Time(s)','Amplitude',Fs,'High Tone Grand Averaged P300 signal for different channels','High Tone Grand Averaged P300 Signal');
grand_avg_low = grand_averaged_signal(P300_set_low,k+2,savedFolder,'Time(s)','Amplitude',Fs,'Low Tone Grand Averaged P300 signal for different channels','Low Tone Grand Averaged P300 Signal');

%saving the .mat data in the specified folder, with specified name
name1 = ['Low_Grand_Average_', folder_name];
name2 = ['High_Grand_Average_', folder_name];

newName = sprintf(name1);
S5.(newName) = grand_avg_low ;
save(fullfile(savedFolder,name1), '-struct', 'S5');

newName = sprintf(name2);
S6.(newName) = grand_avg_high;
save(fullfile(savedFolder,name2), '-struct', 'S6');



